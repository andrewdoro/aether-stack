---
export interface Props extends astroHTML.JSX.ImgHTMLAttributes {
  src: string;
  alt: string;
  quality?: number;
  width?: number; // image sizes we generate in the config
}

const imageConfigDefault = {
  deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  formats: ["image/webp"],
  dangerouslyAllowSVG: false,
  contentSecurityPolicy: `script-src 'none'; frame-src 'none'; sandbox;`,
  remotePatterns: [],
  unoptimized: false,
};

function getWidths(
  width: number | undefined,
  sizes: string | undefined | null
): { widths: number[]; kind: "w" | "x" } {
  const allSizes = [...imageConfigDefault.deviceSizes, ...imageConfigDefault.imageSizes].sort(
    (a, b) => a - b
  );
  const deviceSizes = imageConfigDefault.deviceSizes.sort((a, b) => a - b);
  if (sizes) {
    // Find all the "vw" percent sizes used in the sizes prop
    const viewportWidthRe = /(^|\s)(1?\d?\d)vw/g;
    const percentSizes = [];
    for (let match; (match = viewportWidthRe.exec(sizes)); match) {
      percentSizes.push(parseInt(match[2]));
    }
    if (percentSizes.length) {
      const smallestRatio = Math.min(...percentSizes) * 0.01;
      return {
        widths: allSizes.filter((s) => s >= deviceSizes[0] * smallestRatio),
        kind: "w",
      };
    }
    return { widths: allSizes, kind: "w" };
  }
  if (typeof width !== "number") {
    return { widths: deviceSizes, kind: "w" };
  }

  const widths = [
    ...new Set(
      // > This means that most OLED screens that say they are 3x resolution,
      // > are actually 3x in the green color, but only 1.5x in the red and
      // > blue colors. Showing a 3x resolution image in the app vs a 2x
      // > resolution image will be visually the same, though the 3x image
      // > takes significantly more data. Even true 3x resolution screens are
      // > wasteful as the human eye cannot see that level of detail without
      // > something like a magnifying glass.
      // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
      [width, width * 2 /*, width * 3*/].map(
        (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]
      )
    ),
  ];
  return { widths, kind: "x" };
}
const optimizedURL = (src: string, width: number, quality: number) =>
  import.meta.env.MODE === "production" // this will only run in production
    ? `/_vercel/image?url=${encodeURIComponent(src)}&w=${width}&q=${quality}`
    : src;

const { src, alt, sizes, height, quality = 75, width = 828, ...rest } = Astro.props;
const { widths, kind } = getWidths(width, sizes);

const srcSet = widths
  .map((v, i) => `${optimizedURL(src, width, quality)} ${kind === "w" ? w : i + 1}${kind}`)
  .join(", ");
---

<img
  src={optimizedURL(src, width, quality)}
  alt={alt}
  sizes={!sizes && kind === "w" ? "100vw" : sizes}
  srcset={srcSet}
  style={{ width: `${width}px`, height: `${height}px` }}
  {...rest}
/>
